<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [MPU TEST\MPU TEST.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image MPU TEST\MPU TEST.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Sep 29 22:03:18 2019
<BR><P>
<H3>Maximum Stack Usage =       1320 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; arch &rArr; handle_input &rArr; run_self_test &rArr; mpu_run_6500_self_test &rArr; get_st_6500_biases &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[31]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[35]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[36]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[37]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[38]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[39]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3b]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3c]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3d]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2e]">EXTI15_10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1e]">EXTI9_5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[41]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[27]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[26]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[29]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[28]">I2C2_EV_IRQHandler</a> from stm32f4xx_it.o(i.I2C2_EV_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[40]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3f]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4b]">I2C_DMAAbort</a> from stm32f4xx_hal_i2c.o(i.I2C_DMAAbort) referenced from stm32f4xx_hal_i2c.o(i.I2C_ITError)
 <LI><a href="#[4b]">I2C_DMAAbort</a> from stm32f4xx_hal_i2c.o(i.I2C_DMAAbort) referenced from stm32f4xx_hal_i2c.o(i.I2C_Slave_STOPF)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3a]">OTG_FS_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[30]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2f]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[32]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2b]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[34]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[42]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[22]">TIM1_CC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[21]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[20]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[23]">TIM2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[24]">TIM3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[25]">TIM4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[33]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[4a]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[2c]">USART1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[2d]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[3e]">USART6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[4d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[4f]">android_orient_cb</a> from arch.o(i.android_orient_cb) referenced from arch.o(i.arch)
 <LI><a href="#[4c]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[10a]">inv_auto_calibrate</a> from accel_auto_cal.o(.text) referenced 3 times from accel_auto_cal.o(.text)
 <LI><a href="#[53]">inv_db_load_func</a> from data_builder.o(i.inv_db_load_func) referenced from data_builder.o(i.inv_init_data_builder)
 <LI><a href="#[52]">inv_db_save_func</a> from data_builder.o(i.inv_db_save_func) referenced from data_builder.o(i.inv_init_data_builder)
 <LI><a href="#[54]">inv_generate_eMPL_outputs</a> from empl_outputs.o(i.inv_generate_eMPL_outputs) referenced from empl_outputs.o(i.inv_start_eMPL_outputs)
 <LI><a href="#[a8]">inv_generate_fast_nomot</a> from fast_no_motion.o(.text) referenced 2 times from fast_no_motion.o(.text)
 <LI><a href="#[49]">inv_generate_quaternion</a> from quaternion_supervisor.o(.text) referenced from quaternion_supervisor.o(.text)
 <LI><a href="#[55]">inv_generate_results</a> from results_holder.o(i.inv_generate_results) referenced from results_holder.o(i.inv_start_results_holder)
 <LI><a href="#[88]">inv_generate_vector_compass_cal</a> from compass_vec_cal.o(.text) referenced 3 times from compass_vec_cal.o(.text)
 <LI><a href="#[46]">inv_gtc_data_cb</a> from gyro_tc.o(.text) referenced from gyro_tc.o(.text)
 <LI><a href="#[48]">inv_gtc_load</a> from gyro_tc.o(.text) referenced from gyro_tc.o(.text)
 <LI><a href="#[47]">inv_gtc_store</a> from gyro_tc.o(.text) referenced from gyro_tc.o(.text)
 <LI><a href="#[e2]">inv_magnetic_disturbance_process</a> from mag_disturb.o(.text) referenced 4 times from mag_disturb.o(.text)
 <LI><a href="#[c2]">inv_process_9x_sensor_fusion_cb</a> from fusion_9axis.o(.text) referenced 2 times from fusion_9axis.o(.text)
 <LI><a href="#[c4]">inv_start_9x_sensor_fusion</a> from fusion_9axis.o(.text) referenced 2 times from fusion_9axis.o(.text)
 <LI><a href="#[50]">inv_start_eMPL_outputs</a> from empl_outputs.o(i.inv_start_eMPL_outputs) referenced from empl_outputs.o(i.inv_enable_eMPL_outputs)
 <LI><a href="#[b1]">inv_start_fast_nomot</a> from fast_no_motion.o(.text) referenced 2 times from fast_no_motion.o(.text)
 <LI><a href="#[cf]">inv_start_gyro_tc</a> from gyro_tc.o(.text) referenced 2 times from gyro_tc.o(.text)
 <LI><a href="#[110]">inv_start_in_use_auto_calibration</a> from accel_auto_cal.o(.text) referenced 2 times from accel_auto_cal.o(.text)
 <LI><a href="#[e4]">inv_start_magnetic_disturbance</a> from mag_disturb.o(.text) referenced from mag_disturb.o(.text)
 <LI><a href="#[f8]">inv_start_quaternion</a> from quaternion_supervisor.o(.text) referenced 2 times from quaternion_supervisor.o(.text)
 <LI><a href="#[51]">inv_start_results_holder</a> from results_holder.o(i.inv_start_results_holder) referenced from results_holder.o(i.inv_enable_results_holder)
 <LI><a href="#[8a]">inv_start_vector_compass_cal</a> from compass_vec_cal.o(.text) referenced 2 times from compass_vec_cal.o(.text)
 <LI><a href="#[43]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4e]">tap_cb</a> from arch.o(i.tap_cb) referenced from arch.o(i.arch)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[217]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[56]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[218]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[219]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[21a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[21b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[21c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[21d]"></a>inv_vector_compass_cal_sensitivity</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, compass_vec_cal.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>inv_cheap_rand</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, compass_vec_cal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
</UL>

<P><STRONG><a name="[5f]"></a>inv_cheap_gaussian</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = inv_cheap_gaussian &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
</UL>

<P><STRONG><a name="[66]"></a>inv_combine_compass_data</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_combine_compass_data &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[67]"></a>inv_set_terms</STRONG> (Thumb, 932 bytes, Stack size 72 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_set_terms &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
</UL>

<P><STRONG><a name="[68]"></a>inv_compute_bias</STRONG> (Thumb, 2142 bytes, Stack size 176 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = inv_compute_bias &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
</UL>

<P><STRONG><a name="[6c]"></a>inv_center_sum</STRONG> (Thumb, 1784 bytes, Stack size 144 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = inv_center_sum &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[6e]"></a>inv_get_current_calibrated_compass</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inv_get_current_calibrated_compass &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_to_body_with_scale
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_compass_bias
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
</UL>

<P><STRONG><a name="[71]"></a>inv_add_compass_block_data</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_add_compass_block_data &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_got_compass_bias
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_current_calibrated_compass
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_ignore_compass_data
</UL>

<P><STRONG><a name="[7a]"></a>inv_check_sim</STRONG> (Thumb, 400 bytes, Stack size 144 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = inv_check_sim &rArr; inv_compute_bias &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_6axis_quaternion
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_terms
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[7e]"></a>inv_reset_data_collection</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_reset_data_collection
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_vector_compass_cal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[80]"></a>inv_process_compass_only_cal</STRONG> (Thumb, 1720 bytes, Stack size 360 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = inv_process_compass_only_cal &rArr; inv_check_sim &rArr; inv_compute_bias &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_state
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias_error
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias_found
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_magnetic_disturbance
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_data_collection
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_center_sum
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_terms
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_compass_data
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_peaks
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_bias_stability
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_ignore_compass_data
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_vector_compass_cal
</UL>

<P><STRONG><a name="[88]"></a>inv_generate_vector_compass_cal</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = inv_generate_vector_compass_cal &rArr; inv_process_compass_only_cal &rArr; inv_check_sim &rArr; inv_compute_bias &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_sensitivity_const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> compass_vec_cal.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>inv_start_vector_compass_cal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = inv_start_vector_compass_cal &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> compass_vec_cal.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>inv_stop_vector_compass_cal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, compass_vec_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[8e]"></a>inv_init_vector_compass_cal</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_init_vector_compass_cal &rArr; inv_init_check_sample_balance_parameter
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_check_sample_balance_parameter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_data_collection
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_vector_compass_cal
</UL>

<P><STRONG><a name="[90]"></a>inv_enable_vector_compass_cal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inv_enable_vector_compass_cal &rArr; inv_init_vector_compass_cal &rArr; inv_init_check_sample_balance_parameter
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_vector_compass_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[92]"></a>inv_disable_vector_compass_cal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, compass_vec_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[9c]"></a>inv_init_maxmin</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_init_maxmin
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_fast_nomot
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_fast_nomot
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_packet
</UL>

<P><STRONG><a name="[95]"></a>inv_fast_nomot_parameter</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = inv_fast_nomot_parameter &rArr; __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
</UL>

<P><STRONG><a name="[99]"></a>inv_fast_nomot_parameter_3rd</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = inv_fast_nomot_parameter_3rd &rArr; __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[9a]"></a>inv_fast_nomot_set_gyro_bias</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_fast_nomot_set_gyro_bias &rArr; inv_set_gyro_bias &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_bias
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_motion_state
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_maxmin
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[21e]"></a>inv_set_fast_nomot_compass_threshold</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>int_set_fast_nomot_gyro_threshold</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>inv_set_fast_nomot_accel_threshold</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>inv_get_fast_nomot_compass_param</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>inv_get_fast_nomot_accel_param</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>inv_fast_nomot_store_data</STRONG> (Thumb, 140 bytes, Stack size 44 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inv_fast_nomot_store_data
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sensor_data_preprocess
</UL>

<P><STRONG><a name="[a7]"></a>inv_fast_nomot_store_data_compass</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_fast_nomot_store_data_compass
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sensor_data_preprocess
</UL>

<P><STRONG><a name="[a9]"></a>inv_fast_nomot_reset_data_compass</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_fast_nomot_reset_data_compass
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[ac]"></a>inv_fast_nomot_get_time_elaps</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fast_no_motion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[ab]"></a>inv_fast_nomot_parameter_compass</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fast_no_motion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[a0]"></a>inv_get_right_shift_by_rounding</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fast_no_motion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>

<P><STRONG><a name="[aa]"></a>inv_reset_min_max_gyro_accel_statistics</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fast_no_motion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[ae]"></a>inv_record_max_moment_in_no_motion_gyro</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_record_max_moment_in_no_motion_gyro
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[ad]"></a>inv_record_max_moment_in_no_motion_accel</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_record_max_moment_in_no_motion_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[a4]"></a>inv_record_min_moment_in_motion_gyro</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_record_min_moment_in_motion_gyro
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
</UL>

<P><STRONG><a name="[a3]"></a>inv_record_min_moment_in_motion_accel</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_record_min_moment_in_motion_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
</UL>

<P><STRONG><a name="[a1]"></a>inv_detect_motion_by_gyro_accel</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = inv_detect_motion_by_gyro_accel &rArr; inv_fast_nomot_parameter &rArr; __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_record_min_moment_in_motion_accel
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_record_min_moment_in_motion_gyro
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_maxmin
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[a5]"></a>inv_sensor_data_preprocess</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_sensor_data_preprocess &rArr; inv_fast_nomot_store_data
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_store_data_compass
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_store_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
</UL>

<P><STRONG><a name="[a8]"></a>inv_generate_fast_nomot</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_generate_fast_nomot &rArr; inv_fast_nomot_set_gyro_bias &rArr; inv_set_gyro_bias &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_motion_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sensor_data_preprocess
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_record_max_moment_in_no_motion_accel
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_record_max_moment_in_no_motion_gyro
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_min_max_gyro_accel_statistics
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter_compass
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_get_time_elaps
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_reset_data_compass
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fast_no_motion.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>inv_set_default_number_of_samples</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_set_default_number_of_samples &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_in_use_auto_calibration
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_fast_nomot
</UL>

<P><STRONG><a name="[b0]"></a>inv_init_fast_nomot</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_init_fast_nomot &rArr; inv_set_default_number_of_samples &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_default_number_of_samples
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_maxmin
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_fast_nomot
</UL>

<P><STRONG><a name="[b1]"></a>inv_start_fast_nomot</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = inv_start_fast_nomot &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_maxmin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fast_no_motion.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>inv_stop_fast_nomot</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fast_no_motion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_motion_state
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_fast_nomot
</UL>

<P><STRONG><a name="[b4]"></a>inv_enable_fast_nomot</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_enable_fast_nomot &rArr; inv_init_fast_nomot &rArr; inv_set_default_number_of_samples &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_fast_nomot
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[b5]"></a>inv_disable_fast_nomot</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fast_no_motion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_fast_nomot
</UL>

<P><STRONG><a name="[223]"></a>inv_get_fnm_gyro_no_motion_param</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>inv_fnm_debug_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fast_no_motion.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>inv_filter_correction_angle</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_filter_correction_angle &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[ba]"></a>inv_perform_9x_fusion</STRONG> (Thumb, 894 bytes, Stack size 216 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = inv_perform_9x_fusion &rArr; inv_find_synchronized_compass_angle &rArr; inv_compass_angle &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_quaternion_to_rotation
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_correction
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_6axis_quaternion
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_normalizef
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_multf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_sum_of_sqr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_magnetic_disturbance_state
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_find_synchronized_compass_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_9x_sensor_fusion_cb
</UL>

<P><STRONG><a name="[c2]"></a>inv_process_9x_sensor_fusion_cb</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = inv_process_9x_sensor_fusion_cb &rArr; inv_perform_9x_fusion &rArr; inv_find_synchronized_compass_angle &rArr; inv_compass_angle &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusion_9axis.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>inv_init_9x_fusion</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_init_9x_fusion &rArr; inv_set_compass_correction
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_correction
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_9x_sensor_fusion
</UL>

<P><STRONG><a name="[225]"></a>inv_9x_fusion_set_mag_fb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fusion_9axis.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>inv_9x_fusion_enable_jitter_reduction</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fusion_9axis.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>inv_9x_fusion_use_timestamps</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fusion_9axis.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>inv_start_9x_sensor_fusion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = inv_start_9x_sensor_fusion &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fusion_9axis.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>inv_stop_9x_sensor_fusion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fusion_9axis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[c6]"></a>inv_enable_9x_sensor_fusion</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_enable_9x_sensor_fusion &rArr; inv_init_9x_fusion &rArr; inv_set_compass_correction
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_9x_fusion
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[c7]"></a>inv_disable_9x_sensor_fusion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fusion_9axis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
</UL>

<P><STRONG><a name="[ce]"></a>inv_init_gyro_ts</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_init_gyro_ts
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_gyro_tc
</UL>

<P><STRONG><a name="[228]"></a>inv_set_gtc_max_temp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>inv_set_gtc_min_temp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>inv_set_gtc_min_diff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>inv_get_gyro_ts</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>inv_set_gyro_ts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>inv_set_gtc_order</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>inv_print_gtc_data</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>inv_start_gyro_tc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = inv_start_gyro_tc &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro_tc.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>inv_stop_gyro_tc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gyro_tc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[d1]"></a>inv_enable_gyro_tc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_enable_gyro_tc &rArr; inv_register_load_store
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_load_store
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_gyro_ts
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[d3]"></a>inv_disable_gyro_tc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gyro_tc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[82]"></a>inv_set_magnetic_disturbance</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mag_disturb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[d4]"></a>inv_init_magnetic_disturbance</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_init_magnetic_disturbance
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_magnetic_disturbance
</UL>

<P><STRONG><a name="[d5]"></a>MagDisturbSetDisturbance</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MagDisturbSetDisturbance &rArr; inv_set_compass_correction
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_correction
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[d6]"></a>MagDisturbCheckSettling</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MagDisturbCheckSettling
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_acc_state
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[d8]"></a>ComputeAngleVelocity</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ComputeAngleVelocity &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_quaternion_to_rotation
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[22f]"></a>inv_disable_dip_tracking</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mag_disturb.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>Mag3ofNormalizedLong</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mag3ofNormalizedLong &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[de]"></a>inv_track_dip_angle</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, mag_disturb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[da]"></a>inv_check_magnetic_disturbance</STRONG> (Thumb, 758 bytes, Stack size 104 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = inv_check_magnetic_disturbance &rArr; ComputeAngleVelocity &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_got_compass_bias
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_local_field
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_compass_correction
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_sum_of_sqr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_on
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_track_dip_angle
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag3ofNormalizedLong
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAngleVelocity
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagDisturbCheckSettling
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagDisturbSetDisturbance
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_magnetic_disturbance_process
</UL>

<P><STRONG><a name="[e2]"></a>inv_magnetic_disturbance_process</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = inv_magnetic_disturbance_process &rArr; inv_check_magnetic_disturbance &rArr; ComputeAngleVelocity &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_6axis_quaternion
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_disturbance
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mag_disturb.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>inv_start_magnetic_disturbance</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = inv_start_magnetic_disturbance &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mag_disturb.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>inv_stop_magnetic_disturbance</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mag_disturb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[e6]"></a>inv_enable_magnetic_disturbance</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mag_disturb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_enable_magnetic_disturbance &rArr; inv_init_magnetic_disturbance
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_magnetic_disturbance
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[e7]"></a>inv_disable_magnetic_disturbance</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mag_disturb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[230]"></a>inv_enable_dip_tracking</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mag_disturb.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>inv_get_magnetic_disturbance_state</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mag_disturb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[ee]"></a>inv_generate_gyro_quaternion</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_generate_gyro_quaternion &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_add
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_normalize_quat
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>

<P><STRONG><a name="[f1]"></a>inv_set_quaternion</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, quaternion_supervisor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
</UL>

<P><STRONG><a name="[f2]"></a>inv_generate_accel_gyro_quaternion</STRONG> (Thumb, 468 bytes, Stack size 104 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = inv_generate_accel_gyro_quaternion &rArr; accel_fusion &rArr; inv_q_norm4 &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_rotate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_add
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_normalize_quat
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_quat_from_accel
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_fusion
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_quaternion
</UL>

<P><STRONG><a name="[f6]"></a>inv_stop_quaternion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, quaternion_supervisor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[f7]"></a>inv_init_quaternion</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_init_quaternion
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_quaternion
</UL>

<P><STRONG><a name="[f8]"></a>inv_start_quaternion</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = inv_start_quaternion &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternion_supervisor.o(.text)
</UL>
<P><STRONG><a name="[f9]"></a>inv_enable_quaternion</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_enable_quaternion &rArr; inv_init_quaternion
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_quaternion
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[fa]"></a>inv_disable_quaternion</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, quaternion_supervisor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[10f]"></a>inv_init_accel_maxmin</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, accel_auto_cal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_in_use_auto_calibration
</UL>

<P><STRONG><a name="[10d]"></a>inv_record_good_accel_maxmin</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, accel_auto_cal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[fb]"></a>inv_get_current_calibrated_accel</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_get_current_calibrated_accel &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_to_body_with_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
</UL>

<P><STRONG><a name="[107]"></a>inv_sort_order_4_T</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, accel_auto_cal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sample_balance
</UL>

<P><STRONG><a name="[103]"></a>inv_init_check_sample_balance</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, accel_auto_cal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_check_sample_balance_parameter
</UL>

<P><STRONG><a name="[8f]"></a>inv_init_check_sample_balance_parameter</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_init_check_sample_balance_parameter
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_check_sample_balance
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_in_use_auto_calibration
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_vector_compass_cal
</UL>

<P><STRONG><a name="[104]"></a>inv_add_accel_block_data</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_add_accel_block_data &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_current_calibrated_accel
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[105]"></a>inv_add_vector_block_data</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, accel_auto_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_gravity
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[76]"></a>inv_check_sample_balance</STRONG> (Thumb, 372 bytes, Stack size 20 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_check_sample_balance
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sort_order_4_T
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_ignore_compass_data
</UL>

<P><STRONG><a name="[10a]"></a>inv_auto_calibrate</STRONG> (Thumb, 828 bytes, Stack size 112 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = inv_auto_calibrate &rArr; inv_combine_data_calculate_bias &rArr; inv_compute_bias &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel_float
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_record_good_accel_maxmin
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_coverage_set_bias
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_store_data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter_3rd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sample_balance
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_terms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accel_auto_cal.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>inv_init_in_use_auto_calibration</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, accel_auto_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_accel_maxmin
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_default_number_of_samples
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_check_sample_balance_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_in_use_auto_calibration
</UL>

<P><STRONG><a name="[110]"></a>inv_start_in_use_auto_calibration</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = inv_start_in_use_auto_calibration &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accel_auto_cal.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>inv_stop_in_use_auto_calibration</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, accel_auto_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[112]"></a>inv_enable_in_use_auto_calibration</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, accel_auto_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_in_use_auto_calibration
</UL>

<P><STRONG><a name="[113]"></a>inv_disable_in_use_auto_calibration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, accel_auto_cal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_data_cb
</UL>

<P><STRONG><a name="[231]"></a>inv_get_accel_bias_stage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, accel_auto_cal.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_compute_slope
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_sensitivity_const
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_right_shift_by_rounding
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[232]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_right_shift_by_rounding
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter_3rd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter
</UL>

<P><STRONG><a name="[233]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_db_save_func
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_db_load_func
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_store
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_load
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_bias_stability
</UL>

<P><STRONG><a name="[235]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_unregister_mpl_start_notification
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_add_data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_find_synchronized_compass_angle
</UL>

<P><STRONG><a name="[236]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[237]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMPL_send_quat
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMPL_send_data
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_eMPL_outputs
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_results_holder
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_storage_manager
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_start_manager
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_compass_soft_iron_matrix
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_data_builder
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_in_use_auto_calibration
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_quaternion
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_magnetic_disturbance
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_gyro_ts
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_compute_slope
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_9x_fusion
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_fast_nomot
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_fast_nomot
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_packet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_vector_compass_cal
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_data_collection
</UL>

<P><STRONG><a name="[239]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e0]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_bias
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_bias
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_quaternion
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_vector_block_data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_center_sum
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_terms
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_compass_data
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_coverage_set_bias
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_center_sum
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_bias_stability
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_center_sum
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_center_sum
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_terms
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_compass_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_vector_block_data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_l2f</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ffltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_l2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter_3rd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_6500_self_test
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_6500_self_test
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_terms
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_sensitivity_const
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_f2lz</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ffixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter_3rd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_parameter
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_coverage_set_bias
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_compass
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_6500_self_test
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_6500_self_test
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_vector_block_data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_compass_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_6500_self_test
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_coverage_set_bias
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_bias_stability
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_6500_self_test
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_6500_self_test
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_bias_stability
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_peaks
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_vector_block_data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_filter_correction_angle
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[23b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[11b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>

<P><STRONG><a name="[11a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[119]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[11d]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[57]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[23d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[165]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
</UL>

<P><STRONG><a name="[170]"></a>Get_I2C_Retry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_resource.o(i.Get_I2C_Retry))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
</UL>

<P><STRONG><a name="[14b]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[161]"></a>HAL_DMA_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
</UL>

<P><STRONG><a name="[121]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
</UL>

<P><STRONG><a name="[137]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 282 bytes, Stack size 20 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[139]"></a>HAL_GPIO_Init</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[122]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[156]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[160]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_AddrCallback))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ADDR
</UL>

<P><STRONG><a name="[123]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
</UL>

<P><STRONG><a name="[125]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF &rArr; I2C_ITError
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ADDR
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit_TXE
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit_BTF
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive_RXNE
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive_BTF
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_SB
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ADDR
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ADD10
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConvertOtherXferOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[134]"></a>HAL_I2C_Init</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
</UL>

<P><STRONG><a name="[159]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_ListenCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[15b]"></a>HAL_I2C_MasterRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MasterRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
</UL>

<P><STRONG><a name="[15c]"></a>HAL_I2C_MasterTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MasterTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
</UL>

<P><STRONG><a name="[15a]"></a>HAL_I2C_MemRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MemRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
</UL>

<P><STRONG><a name="[15d]"></a>HAL_I2C_MemTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MemTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
</UL>

<P><STRONG><a name="[124]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[135]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[15e]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_SlaveRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive_RXNE
</UL>

<P><STRONG><a name="[15f]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_SlaveTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit_TXE
</UL>

<P><STRONG><a name="[173]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13c]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_MspInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[138]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[13b]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[13a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[13d]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[143]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[145]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[136]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[146]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[144]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[147]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1086 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[140]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[14c]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[148]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_UART_MspInit</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[153]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[152]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board_resource.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[154]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[175]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.I2C2_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C2_EV_IRQHandler &rArr; HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF &rArr; I2C_ITError
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, board_resource.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_ReadRegister
</UL>

<P><STRONG><a name="[16a]"></a>I2C_GenerateSTART</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, board_resource.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_WriteRegister
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_ReadRegister
</UL>

<P><STRONG><a name="[163]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, board_resource.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_WriteRegister
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_ReadRegister
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
</UL>

<P><STRONG><a name="[16c]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board_resource.o(i.I2C_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_WriteRegister
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_ReadRegister
</UL>

<P><STRONG><a name="[16b]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board_resource.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_WriteRegister
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_ReadRegister
</UL>

<P><STRONG><a name="[164]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, board_resource.o(i.I2C_SoftwareResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_SoftwareResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
</UL>

<P><STRONG><a name="[166]"></a>MX_GPIO_Init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[167]"></a>MX_I2C2_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>ST_Sensors_I2C_ReadRegister</STRONG> (Thumb, 968 bytes, Stack size 32 bytes, board_resource.o(i.ST_Sensors_I2C_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ST_Sensors_I2C_ReadRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
</UL>

<P><STRONG><a name="[16e]"></a>ST_Sensors_I2C_WriteRegister</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, board_resource.o(i.ST_Sensors_I2C_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cx_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[16f]"></a>Sensors_I2C_ReadRegister</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, board_resource.o(i.Sensors_I2C_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Sensors_I2C_ReadRegister &rArr; ST_Sensors_I2C_ReadRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_ReadRegister
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_I2C_Retry
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reg_dump
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_compass_reg
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_reg
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_compass
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_6500_self_test
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_self_test
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_6500_self_test
</UL>

<P><STRONG><a name="[171]"></a>Sensors_I2C_WriteRegister</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, board_resource.o(i.Sensors_I2C_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_WriteRegister
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_I2C_Retry
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_compass_sample_rate
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_compass
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_self_test
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[174]"></a>SystemClock_Config</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[176]"></a>_MLPrintLog</STRONG> (Thumb, 204 bytes, Stack size 328 bytes, log_stm32.o(i._MLPrintLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reg_dump
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_compass
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tap_cb
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;android_orient_cb
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_compass
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_6500_self_test
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_6500_self_test
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__print_result_location
</UL>

<P><STRONG><a name="[178]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23e]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[172]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[23f]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[240]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[17a]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[241]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[242]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[243]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[177]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>

<P><STRONG><a name="[18c]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[180]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[dd]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[17f]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_heading
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_euler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_angle
</UL>

<P><STRONG><a name="[109]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sample_rate
</UL>

<P><STRONG><a name="[61]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
</UL>

<P><STRONG><a name="[101]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_6500_self_test
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_6500_self_test
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_coverage_set_bias
</UL>

<P><STRONG><a name="[63]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
</UL>

<P><STRONG><a name="[bd]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[6b]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_vector_block_data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_accel_block_data
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
</UL>

<P><STRONG><a name="[65]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_euler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_norm4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_normalize_quat
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_quat_from_accel
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_fusion
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag3ofNormalizedLong
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_default_number_of_samples
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_cheap_gaussian
</UL>

<P><STRONG><a name="[185]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[187]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[18a]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[186]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[189]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[184]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[183]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[18d]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[17c]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[182]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[17e]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[181]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[188]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[244]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[245]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[246]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[17d]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[194]"></a>arch</STRONG> (Thumb, 908 bytes, Stack size 96 bytes, arch.o(i.arch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = arch &rArr; handle_input &rArr; run_self_test &rArr; mpu_run_6500_self_test &rArr; get_st_6500_biases &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_compass_sample_rate
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_compass_reg
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_compass_fsr
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_reg
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_mpl
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sample_rate
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_orientation_and_scale
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_sample_rate
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_orientation_and_scale
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_sample_rate
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_orientation_and_scale
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_quaternion_sensor_was_turned_off
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_mpl
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gyro_was_turned_off
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_on_data
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_vector_compass_cal
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_quaternion
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_magnetic_disturbance
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_gyro_tc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_fast_nomot
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_eMPL_outputs
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_9x_sensor_fusion
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_was_turned_off
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_temp
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_quat
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_gyro
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_compass
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_accel
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_accel_was_turned_off
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_register_tap_cb
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_register_android_orient_cb
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>dmp_enable_6x_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_6x_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dmp_enable_6x_lp_quat &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1ad]"></a>dmp_enable_feature</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = dmp_enable_feature &rArr; dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[1c8]"></a>dmp_enable_gyro_cal</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_gyro_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1d1]"></a>dmp_enable_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dmp_enable_lp_quat &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1e6]"></a>dmp_get_fifo_rate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_get_fifo_rate))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[1d2]"></a>dmp_get_pedometer_step_count</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_get_pedometer_step_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dmp_get_pedometer_step_count &rArr; mpu_read_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[1d4]"></a>dmp_get_pedometer_walk_time</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_get_pedometer_walk_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dmp_get_pedometer_walk_time &rArr; mpu_read_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[1a9]"></a>dmp_load_motion_driver_firmware</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_load_motion_driver_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dmp_load_motion_driver_firmware &rArr; mpu_load_firmware &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1b8]"></a>dmp_read_fifo</STRONG> (Thumb, 456 bytes, Stack size 88 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_gesture
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1ac]"></a>dmp_register_android_orient_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_register_android_orient_cb))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1ab]"></a>dmp_register_tap_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_register_tap_cb))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1ae]"></a>dmp_set_fifo_rate</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_fifo_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dmp_set_fifo_rate &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[1d8]"></a>dmp_set_interrupt_mode</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_interrupt_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dmp_set_interrupt_mode &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[1aa]"></a>dmp_set_orientation</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dmp_set_orientation &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1d9]"></a>dmp_set_pedometer_step_count</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_pedometer_step_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dmp_set_pedometer_step_count &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[1da]"></a>dmp_set_pedometer_walk_time</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_pedometer_walk_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dmp_set_pedometer_walk_time &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[1ce]"></a>dmp_set_shake_reject_thresh</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dmp_set_shake_reject_thresh &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1cf]"></a>dmp_set_shake_reject_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dmp_set_shake_reject_time &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1d0]"></a>dmp_set_shake_reject_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dmp_set_shake_reject_timeout &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1ca]"></a>dmp_set_tap_axes</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dmp_set_tap_axes &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1cb]"></a>dmp_set_tap_count</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dmp_set_tap_count &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1c9]"></a>dmp_set_tap_thresh</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1cc]"></a>dmp_set_tap_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dmp_set_tap_time &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1cd]"></a>dmp_set_tap_time_multi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dmp_set_tap_time_multi &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[1db]"></a>eMPL_send_data</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, log_stm32.o(i.eMPL_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = eMPL_send_data &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[1dc]"></a>eMPL_send_quat</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, log_stm32.o(i.eMPL_send_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = eMPL_send_quat &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[18b]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[4c]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMPL_send_quat
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMPL_send_data
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[1a8]"></a>get_tick_count</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board_resource.o(i.get_tick_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_tick_count
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_temperature
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_compass_reg
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_reg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[1b2]"></a>inv_accel_was_turned_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data_builder.o(i.inv_accel_was_turned_off))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[1e7]"></a>inv_apply_calibration</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, data_builder.o(i.inv_apply_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_to_body_with_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_bias
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_bias
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_gyro
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_compass
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_accel
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_bias_mask
</UL>

<P><STRONG><a name="[1b7]"></a>inv_build_accel</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, data_builder.o(i.inv_build_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_build_accel &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1bf]"></a>inv_build_compass</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, data_builder.o(i.inv_build_compass))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = inv_build_compass &rArr; inv_set_compass_soft_iron_input_data &rArr; mlMatrixVectorMult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_soft_iron_input_data
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_compass_soft_iron_output_data
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1b9]"></a>inv_build_gyro</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, data_builder.o(i.inv_build_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_build_gyro &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1bc]"></a>inv_build_quat</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, data_builder.o(i.inv_build_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_build_quat
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1bb]"></a>inv_build_temp</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, data_builder.o(i.inv_build_temp))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[b8]"></a>inv_compass_angle</STRONG> (Thumb, 170 bytes, Stack size 104 bytes, ml_math_func.o(i.inv_compass_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_compass_angle &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_to_float
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_find_synchronized_compass_angle
</UL>

<P><STRONG><a name="[1b4]"></a>inv_compass_was_turned_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, data_builder.o(i.inv_compass_was_turned_off))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[70]"></a>inv_convert_to_body_with_scale</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, ml_math_func.o(i.inv_convert_to_body_with_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_current_calibrated_accel
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_current_calibrated_compass
</UL>

<P><STRONG><a name="[206]"></a>inv_disable_compass_soft_iron_matrix</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, data_builder.o(i.inv_disable_compass_soft_iron_matrix))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_compass_soft_iron_matrix
</UL>

<P><STRONG><a name="[197]"></a>inv_enable_eMPL_outputs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, empl_outputs.o(i.inv_enable_eMPL_outputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_enable_eMPL_outputs &rArr; inv_init_eMPL_outputs
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_eMPL_outputs
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1ec]"></a>inv_enable_results_holder</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, results_holder.o(i.inv_enable_results_holder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_enable_results_holder &rArr; inv_init_results_holder
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_mpl_start_notification
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_results_holder
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_mpl
</UL>

<P><STRONG><a name="[20a]"></a>inv_execute_mpl_start_notification</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, start_manager.o(i.inv_execute_mpl_start_notification))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_execute_mpl_start_notification
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_mpl
</UL>

<P><STRONG><a name="[1c0]"></a>inv_execute_on_data</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, data_builder.o(i.inv_execute_on_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_execute_on_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_contiguous
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[55]"></a>inv_generate_results</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, results_holder.o(i.inv_generate_results))
<BR>[Address Reference Count : 1]<UL><LI> results_holder.o(i.inv_start_results_holder)
</UL>
<P><STRONG><a name="[7b]"></a>inv_get_6axis_quaternion</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, results_holder.o(i.inv_get_6axis_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_get_6axis_quaternion
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_magnetic_disturbance_process
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
</UL>

<P><STRONG><a name="[d7]"></a>inv_get_acc_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_get_acc_state))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagDisturbCheckSettling
</UL>

<P><STRONG><a name="[1f7]"></a>inv_get_accel_accuracy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_accel_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>

<P><STRONG><a name="[1f6]"></a>inv_get_accel_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_accel_on))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>

<P><STRONG><a name="[1f1]"></a>inv_get_accel_set</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, data_builder.o(i.inv_get_accel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_get_accel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_linear_acceleration
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_accel
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel
</UL>

<P><STRONG><a name="[6f]"></a>inv_get_compass_bias</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_compass_bias))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_current_calibrated_compass
</UL>

<P><STRONG><a name="[e1]"></a>inv_get_compass_correction</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, results_holder.o(i.inv_get_compass_correction))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_get_compass_correction
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[1f3]"></a>inv_get_compass_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_compass_on))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>

<P><STRONG><a name="[1fa]"></a>inv_get_compass_set</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, data_builder.o(i.inv_get_compass_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_get_compass_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_compass
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_compass
</UL>

<P><STRONG><a name="[1e9]"></a>inv_get_compass_soft_iron_output_data</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_compass_soft_iron_output_data))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_compass
</UL>

<P><STRONG><a name="[75]"></a>inv_get_compass_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_get_compass_state))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_ignore_compass_data
</UL>

<P><STRONG><a name="[bb]"></a>inv_get_gravity</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, results_holder.o(i.inv_get_gravity))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inv_get_gravity &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q29_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_linear_acceleration
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_gravity
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_magnetic_disturbance_process
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[dc]"></a>inv_get_gyro</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_gyro))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[1f5]"></a>inv_get_gyro_accuracy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_gyro_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>

<P><STRONG><a name="[cb]"></a>inv_get_gyro_bias</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, data_builder.o(i.inv_get_gyro_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_get_gyro_bias
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_data_cb
</UL>

<P><STRONG><a name="[cd]"></a>inv_get_gyro_bias_tc_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_gyro_bias_tc_set))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_data_cb
</UL>

<P><STRONG><a name="[db]"></a>inv_get_gyro_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_gyro_on))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[1fd]"></a>inv_get_gyro_set</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, data_builder.o(i.inv_get_gyro_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_get_gyro_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_gyro
</UL>

<P><STRONG><a name="[77]"></a>inv_get_gyro_sum_of_sqr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ml_math_func.o(i.inv_get_gyro_sum_of_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_get_gyro_sum_of_sqr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_ignore_compass_data
</UL>

<P><STRONG><a name="[74]"></a>inv_get_large_mag_field</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_get_large_mag_field))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_ignore_compass_data
</UL>

<P><STRONG><a name="[1f2]"></a>inv_get_last_timestamp</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_last_timestamp))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>

<P><STRONG><a name="[f4]"></a>inv_get_linear_accel</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, results_holder.o(i.inv_get_linear_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = inv_get_linear_accel &rArr; inv_get_gravity &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel_float
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>

<P><STRONG><a name="[10b]"></a>inv_get_linear_accel_float</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, results_holder.o(i.inv_get_linear_accel_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = inv_get_linear_accel_float &rArr; inv_get_linear_accel &rArr; inv_get_gravity &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[df]"></a>inv_get_local_field</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, results_holder.o(i.inv_get_local_field))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
</UL>

<P><STRONG><a name="[1f4]"></a>inv_get_mag_accuracy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, data_builder.o(i.inv_get_mag_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>

<P><STRONG><a name="[214]"></a>inv_get_message_level_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, message_layer.o(i.inv_get_message_level_0))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[cc]"></a>inv_get_motion_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, results_holder.o(i.inv_get_motion_state))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_data_cb
</UL>

<P><STRONG><a name="[10c]"></a>inv_get_quaternion</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, results_holder.o(i.inv_get_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inv_get_quaternion &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[1ef]"></a>inv_get_quaternion_set</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, results_holder.o(i.inv_get_quaternion_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_get_quaternion_set &rArr; inv_get_quaternion &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_mag_accuracy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_last_timestamp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_on
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_accuracy
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_compass_on
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_on
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_accuracy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_eMPL_outputs
</UL>

<P><STRONG><a name="[1f8]"></a>inv_get_sensor_type_accel</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, empl_outputs.o(i.inv_get_sensor_type_accel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inv_get_sensor_type_accel &rArr; inv_get_accel_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[1f9]"></a>inv_get_sensor_type_compass</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, empl_outputs.o(i.inv_get_sensor_type_compass))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inv_get_sensor_type_compass &rArr; inv_get_compass_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_compass_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[1fb]"></a>inv_get_sensor_type_euler</STRONG> (Thumb, 588 bytes, Stack size 88 bytes, empl_outputs.o(i.inv_get_sensor_type_euler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = inv_get_sensor_type_euler &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q29_mult
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[106]"></a>inv_get_sensor_type_gravity</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, hal_outputs.o(i.inv_get_sensor_type_gravity))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = inv_get_sensor_type_gravity &rArr; inv_get_gravity &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_vector_block_data
</UL>

<P><STRONG><a name="[1fc]"></a>inv_get_sensor_type_gyro</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, empl_outputs.o(i.inv_get_sensor_type_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inv_get_sensor_type_gyro &rArr; inv_get_gyro_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[1fe]"></a>inv_get_sensor_type_heading</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, empl_outputs.o(i.inv_get_sensor_type_heading))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = inv_get_sensor_type_heading &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q29_mult
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[1ff]"></a>inv_get_sensor_type_linear_acceleration</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, hal_outputs.o(i.inv_get_sensor_type_linear_acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = inv_get_sensor_type_linear_acceleration &rArr; inv_get_gravity &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[213]"></a>inv_get_sensor_type_quat</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, empl_outputs.o(i.inv_get_sensor_type_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_get_sensor_type_quat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[200]"></a>inv_get_sensor_type_rot_mat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, empl_outputs.o(i.inv_get_sensor_type_rot_mat))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = inv_get_sensor_type_rot_mat &rArr; inv_quaternion_to_rotation &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_quaternion_to_rotation
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_mpl
</UL>

<P><STRONG><a name="[72]"></a>inv_got_compass_bias</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_got_compass_bias))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
</UL>

<P><STRONG><a name="[1b3]"></a>inv_gyro_was_turned_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data_builder.o(i.inv_gyro_was_turned_off))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[201]"></a>inv_init_data_builder</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, data_builder.o(i.inv_init_data_builder))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_init_data_builder &rArr; inv_register_load_store
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_load_store
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_compass_soft_iron_matrix
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_mpl
</UL>

<P><STRONG><a name="[196]"></a>inv_init_mpl</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, mpl.o(i.inv_init_mpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = inv_init_mpl &rArr; __print_result_location &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_storage_manager
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_start_manager
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_results_holder
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__print_result_location
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_data_builder
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1ed]"></a>inv_init_results_holder</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, results_holder.o(i.inv_init_results_holder))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_init_results_holder
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_results_holder
</UL>

<P><STRONG><a name="[204]"></a>inv_init_start_manager</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, start_manager.o(i.inv_init_start_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_init_start_manager
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_mpl
</UL>

<P><STRONG><a name="[203]"></a>inv_init_storage_manager</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, storage_manager.o(i.inv_init_storage_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_init_storage_manager
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_mpl
</UL>

<P><STRONG><a name="[1a4]"></a>inv_orientation_matrix_to_scalar</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ml_math_func.o(i.inv_orientation_matrix_to_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_orientation_matrix_to_scalar
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_row_2_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1f0]"></a>inv_q29_mult</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, ml_math_func.o(i.inv_q29_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_q29_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_heading
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_euler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_quaternion_to_rotation
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
</UL>

<P><STRONG><a name="[9d]"></a>inv_q30_mult</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, ml_math_func.o(i.inv_q30_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_angle
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlMatrixVectorMult
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_to_body_with_scale
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_data_calculate_bias
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
</UL>

<P><STRONG><a name="[ef]"></a>inv_q_add</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ml_math_func.o(i.inv_q_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_q_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
</UL>

<P><STRONG><a name="[ea]"></a>inv_q_addf</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q_addf))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_fusion
</UL>

<P><STRONG><a name="[7c]"></a>inv_q_invert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q_invert))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_rotate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_angle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_quaternion
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_magnetic_disturbance
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAngleVelocity
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
</UL>

<P><STRONG><a name="[e9]"></a>inv_q_invertf</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q_invertf))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_fusion
</UL>

<P><STRONG><a name="[7d]"></a>inv_q_mult</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, ml_math_func.o(i.inv_q_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_rotate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_angle
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_quaternion
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAngleVelocity
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_find_synchronized_compass_angle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sim
</UL>

<P><STRONG><a name="[be]"></a>inv_q_multf</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q_multf))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_fusion
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[eb]"></a>inv_q_norm4</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, ml_math_func.o(i.inv_q_norm4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_q_norm4 &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_fusion
</UL>

<P><STRONG><a name="[c0]"></a>inv_q_normalizef</STRONG> (Thumb, 302 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q_normalizef))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[f3]"></a>inv_q_rotate</STRONG> (Thumb, 66 bytes, Stack size 80 bytes, ml_math_func.o(i.inv_q_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_q_rotate &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>

<P><STRONG><a name="[1b5]"></a>inv_quaternion_sensor_was_turned_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, data_builder.o(i.inv_quaternion_sensor_was_turned_off))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[bc]"></a>inv_quaternion_to_rotation</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, ml_math_func.o(i.inv_quaternion_to_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = inv_quaternion_to_rotation &rArr; inv_q29_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q29_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_rot_mat
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeAngleVelocity
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[8b]"></a>inv_register_data_cb</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, data_builder.o(i.inv_register_data_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = inv_register_data_cb &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_eMPL_outputs
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_results_holder
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_in_use_auto_calibration
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_quaternion
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_magnetic_disturbance
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_gyro_tc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_9x_sensor_fusion
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_fast_nomot
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_vector_compass_cal
</UL>

<P><STRONG><a name="[d2]"></a>inv_register_load_store</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, storage_manager.o(i.inv_register_load_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_register_load_store
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_gyro_tc
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_data_builder
</UL>

<P><STRONG><a name="[91]"></a>inv_register_mpl_start_notification</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, start_manager.o(i.inv_register_mpl_start_notification))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_vector_compass_cal
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_quaternion
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_magnetic_disturbance
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_gyro_tc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_fast_nomot
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_eMPL_outputs
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_9x_sensor_fusion
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_results_holder
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_in_use_auto_calibration
</UL>

<P><STRONG><a name="[202]"></a>inv_reset_compass_soft_iron_matrix</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, data_builder.o(i.inv_reset_compass_soft_iron_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_reset_compass_soft_iron_matrix
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_compass_soft_iron_matrix
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_data_builder
</UL>

<P><STRONG><a name="[ff]"></a>inv_set_accel_accuracy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, data_builder.o(i.inv_set_accel_accuracy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_set_accel_accuracy &rArr; inv_set_message
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
</UL>

<P><STRONG><a name="[207]"></a>inv_set_accel_bias</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, data_builder.o(i.inv_set_accel_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_set_accel_bias &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[fe]"></a>inv_set_accel_bias_found</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_set_accel_bias_found))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
</UL>

<P><STRONG><a name="[fd]"></a>inv_set_accel_bias_mask</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, data_builder.o(i.inv_set_accel_bias_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_set_accel_bias_mask &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_push
</UL>

<P><STRONG><a name="[1a6]"></a>inv_set_accel_orientation_and_scale</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_builder.o(i.inv_set_accel_orientation_and_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_set_accel_orientation_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_orientation_and_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1a2]"></a>inv_set_accel_sample_rate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, data_builder.o(i.inv_set_accel_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gyro
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[85]"></a>inv_set_compass_bias</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, data_builder.o(i.inv_set_compass_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_set_compass_bias &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[87]"></a>inv_set_compass_bias_error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, results_holder.o(i.inv_set_compass_bias_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_set_compass_bias_error
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[86]"></a>inv_set_compass_bias_found</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_set_compass_bias_found))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_db_load_func
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[c1]"></a>inv_set_compass_correction</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, results_holder.o(i.inv_set_compass_correction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_set_compass_correction
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MagDisturbSetDisturbance
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_9x_fusion
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[e3]"></a>inv_set_compass_disturbance</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data_builder.o(i.inv_set_compass_disturbance))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_magnetic_disturbance_process
</UL>

<P><STRONG><a name="[1a7]"></a>inv_set_compass_orientation_and_scale</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_builder.o(i.inv_set_compass_orientation_and_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_set_compass_orientation_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_orientation_and_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1a3]"></a>inv_set_compass_sample_rate</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, data_builder.o(i.inv_set_compass_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1e8]"></a>inv_set_compass_soft_iron_input_data</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, data_builder.o(i.inv_set_compass_soft_iron_input_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_set_compass_soft_iron_input_data &rArr; mlMatrixVectorMult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlMatrixVectorMult
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_build_compass
</UL>

<P><STRONG><a name="[83]"></a>inv_set_compass_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, results_holder.o(i.inv_set_compass_state))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[9e]"></a>inv_set_gyro_bias</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, data_builder.o(i.inv_set_gyro_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_set_gyro_bias &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_calibration
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_data_cb
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
</UL>

<P><STRONG><a name="[1a5]"></a>inv_set_gyro_orientation_and_scale</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_builder.o(i.inv_set_gyro_orientation_and_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_set_gyro_orientation_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_orientation_and_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1a1]"></a>inv_set_gyro_sample_rate</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, data_builder.o(i.inv_set_gyro_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[b2]"></a>inv_set_message</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, message_layer.o(i.inv_set_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_set_message
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_bias
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_bias
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_motion_state
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_bias_mask
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_accuracy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_fast_nomot
</UL>

<P><STRONG><a name="[9f]"></a>inv_set_motion_state</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, results_holder.o(i.inv_set_motion_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_set_motion_state &rArr; inv_set_message
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_message
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_fast_nomot
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_nomot_set_gyro_bias
</UL>

<P><STRONG><a name="[1e5]"></a>inv_set_quat_sample_rate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, data_builder.o(i.inv_set_quat_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[198]"></a>inv_start_mpl</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mpl.o(i.inv_start_mpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = inv_start_mpl &rArr; __print_result_location &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_mpl_start_notification
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__print_result_location
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[51]"></a>inv_start_results_holder</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, results_holder.o(i.inv_start_results_holder))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = inv_start_results_holder &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> results_holder.o(i.inv_enable_results_holder)
</UL>
<P><STRONG><a name="[f5]"></a>inv_store_gaming_quaternion</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, results_holder.o(i.inv_store_gaming_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_store_gaming_quaternion
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_quaternion
</UL>

<P><STRONG><a name="[8d]"></a>inv_unregister_data_cb</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, data_builder.o(i.inv_unregister_data_cb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_in_use_auto_calibration
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_in_use_auto_calibration
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_quaternion
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_quaternion
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_magnetic_disturbance
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_magnetic_disturbance
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_gyro_tc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_gyro_tc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_9x_sensor_fusion
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_fast_nomot
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_vector_compass_cal
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_stop_vector_compass_cal
</UL>

<P><STRONG><a name="[93]"></a>inv_unregister_mpl_start_notification</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, start_manager.o(i.inv_unregister_mpl_start_notification), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_in_use_auto_calibration
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_quaternion
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_gyro_tc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_9x_sensor_fusion
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_fast_nomot
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_disable_vector_compass_cal
</UL>

<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = main &rArr; arch &rArr; handle_input &rArr; run_self_test &rArr; mpu_run_6500_self_test &rArr; get_st_6500_biases &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1c4]"></a>mdelay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_resource.o(i.mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mdelay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_compass
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_self_test
</UL>

<P><STRONG><a name="[209]"></a>mlMatrixVectorMult</STRONG> (Thumb, 62 bytes, Stack size 28 bytes, ml_math_func.o(i.mlMatrixVectorMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mlMatrixVectorMult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_soft_iron_input_data
</UL>

<P><STRONG><a name="[19a]"></a>mpu_configure_fifo</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_configure_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mpu_configure_fifo &rArr; set_int_enable &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gyro
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[19f]"></a>mpu_get_accel_fsr</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
</UL>

<P><STRONG><a name="[1b6]"></a>mpu_get_accel_reg</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_get_accel_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mpu_get_accel_reg &rArr; Sensors_I2C_ReadRegister &rArr; ST_Sensors_I2C_ReadRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[215]"></a>mpu_get_accel_sens</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_sens))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[1a0]"></a>mpu_get_compass_fsr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_compass_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1be]"></a>mpu_get_compass_reg</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_get_compass_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mpu_get_compass_reg &rArr; Sensors_I2C_ReadRegister &rArr; ST_Sensors_I2C_ReadRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[211]"></a>mpu_get_fifo_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_fifo_config))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
</UL>

<P><STRONG><a name="[19e]"></a>mpu_get_gyro_fsr</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[216]"></a>mpu_get_gyro_sens</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_sens))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[210]"></a>mpu_get_lpf</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_lpf))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
</UL>

<P><STRONG><a name="[19d]"></a>mpu_get_sample_rate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gyro
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[1ba]"></a>mpu_get_temperature</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_get_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mpu_get_temperature &rArr; Sensors_I2C_ReadRegister &rArr; ST_Sensors_I2C_ReadRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[195]"></a>mpu_init</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mpu_init &rArr; setup_compass &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_compass_sample_rate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_compass
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1d5]"></a>mpu_load_firmware</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, inv_mpu.o(i.mpu_load_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = mpu_load_firmware &rArr; mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
</UL>

<P><STRONG><a name="[1e2]"></a>mpu_lp_accel_mode</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_lp_accel_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[1b1]"></a>mpu_lp_motion_interrupt</STRONG> (Thumb, 606 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_lp_motion_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mpu_lp_motion_interrupt &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_fifo_config
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1bd]"></a>mpu_read_fifo</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, inv_mpu.o(i.mpu_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mpu_read_fifo &rArr; mpu_reset_fifo &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1d6]"></a>mpu_read_fifo_stream</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_fifo_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mpu_read_fifo_stream &rArr; mpu_reset_fifo &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[1d3]"></a>mpu_read_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mpu_read_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_walk_time
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_step_count
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[1e1]"></a>mpu_reg_dump</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_reg_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = mpu_reg_dump &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[1c7]"></a>mpu_reset_fifo</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, inv_mpu.o(i.mpu_reset_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mpu_reset_fifo &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
</UL>

<P><STRONG><a name="[212]"></a>mpu_run_6500_self_test</STRONG> (Thumb, 420 bytes, Stack size 104 bytes, inv_mpu.o(i.mpu_run_6500_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = mpu_run_6500_self_test &rArr; get_st_6500_biases &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_fifo_config
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_6500_self_test
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_6500_biases
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_self_test
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_6500_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[20d]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mpu_set_accel_fsr &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[1c3]"></a>mpu_set_bypass</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_bypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mpu_set_bypass &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_compass
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compass_self_test
</UL>

<P><STRONG><a name="[19c]"></a>mpu_set_compass_sample_rate</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_compass_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mpu_set_compass_sample_rate &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1af]"></a>mpu_set_dmp_state</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_dmp_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[20c]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_gyro_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mpu_set_gyro_fsr &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[1e3]"></a>mpu_set_int_latched</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_int_latched))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mpu_set_int_latched &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[20e]"></a>mpu_set_lpf</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mpu_set_lpf &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[19b]"></a>mpu_set_sample_rate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_compass_sample_rate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[199]"></a>mpu_set_sensors</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mpu_set_sensors &rArr; mpu_set_int_latched &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gyro
</UL>

<P><STRONG><a name="[1c6]"></a>mpu_write_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_write_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = mpu_write_mem &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_pedometer_walk_time
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_pedometer_step_count
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_interrupt_mode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[1e0]"></a>send_status_compass</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, arch.o(i.send_status_compass))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = send_status_compass &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_compass_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[208]"></a>set_sensor_orientation_and_scale</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, data_builder.o(i.set_sensor_orientation_and_scale))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_orientation_and_scale
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_orientation_and_scale
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_orientation_and_scale
</UL>

<P><STRONG><a name="[17b]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4f]"></a>android_orient_cb</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, arch.o(i.android_orient_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = android_orient_cb &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch.o(i.arch)
</UL>
<P><STRONG><a name="[1b0]"></a>handle_input</STRONG> (Thumb, 942 bytes, Stack size 16 bytes, arch.o(i.handle_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = handle_input &rArr; run_self_test &rArr; mpu_run_6500_self_test &rArr; get_st_6500_biases &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reg_dump
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_quat_sample_rate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sample_rate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_sample_rate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_quaternion_sensor_was_turned_off
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gyro_was_turned_off
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_was_turned_off
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_accel_was_turned_off
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_pedometer_walk_time
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_pedometer_step_count
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_interrupt_mode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_rate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_compass
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_gyro
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1c1]"></a>read_from_mpl</STRONG> (Thumb, 548 bytes, Stack size 112 bytes, arch.o(i.read_from_mpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = read_from_mpl &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_rot_mat
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_quat
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_linear_acceleration
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_heading
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_gyro
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_gravity
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_euler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_compass
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_sensor_type_accel
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_message_level_0
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMPL_send_quat
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMPL_send_data
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_walk_time
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_step_count
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arch
</UL>

<P><STRONG><a name="[1e4]"></a>run_self_test</STRONG> (Thumb, 450 bytes, Stack size 96 bytes, arch.o(i.run_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = run_self_test &rArr; mpu_run_6500_self_test &rArr; get_st_6500_biases &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_sens
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_bias
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_bias
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[1df]"></a>setup_gyro</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, arch.o(i.setup_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = setup_gyro &rArr; mpu_set_sensors &rArr; mpu_set_int_latched &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_sample_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_input
</UL>

<P><STRONG><a name="[4e]"></a>tap_cb</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, arch.o(i.tap_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tap_cb &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch.o(i.arch)
</UL>
<P><STRONG><a name="[162]"></a>I2Cx_TIMEOUT_UserCallback</STRONG> (Thumb, 298 bytes, Stack size 168 bytes, board_resource.o(i.I2Cx_TIMEOUT_UserCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftwareResetCmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_WriteRegister
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_Sensors_I2C_ReadRegister
</UL>

<P><STRONG><a name="[193]"></a>accel_6500_self_test</STRONG> (Thumb, 1538 bytes, Stack size 136 bytes, inv_mpu.o(i.accel_6500_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = accel_6500_self_test &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[1c2]"></a>compass_self_test</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, inv_mpu.o(i.compass_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = compass_self_test &rArr; mpu_set_bypass &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[1dd]"></a>get_st_6500_biases</STRONG> (Thumb, 1548 bytes, Stack size 608 bytes, inv_mpu.o(i.get_st_6500_biases))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = get_st_6500_biases &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[1de]"></a>gyro_6500_self_test</STRONG> (Thumb, 1490 bytes, Stack size 128 bytes, inv_mpu.o(i.gyro_6500_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = gyro_6500_self_test &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_6500_self_test
</UL>

<P><STRONG><a name="[20b]"></a>set_int_enable</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mpu.o(i.set_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = set_int_enable &rArr; Sensors_I2C_WriteRegister &rArr; ST_Sensors_I2C_WriteRegister &rArr; I2Cx_TIMEOUT_UserCallback &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_motion_interrupt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[20f]"></a>setup_compass</STRONG> (Thumb, 574 bytes, Stack size 16 bytes, inv_mpu.o(i.setup_compass))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = setup_compass &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_WriteRegister
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensors_I2C_ReadRegister
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[1d7]"></a>decode_gesture</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.decode_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_gesture
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[54]"></a>inv_generate_eMPL_outputs</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, empl_outputs.o(i.inv_generate_eMPL_outputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_generate_eMPL_outputs &rArr; inv_get_quaternion_set &rArr; inv_get_quaternion &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_quaternion_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> empl_outputs.o(i.inv_start_eMPL_outputs)
</UL>
<P><STRONG><a name="[1eb]"></a>inv_init_eMPL_outputs</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, empl_outputs.o(i.inv_init_eMPL_outputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_init_eMPL_outputs
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_eMPL_outputs
</UL>

<P><STRONG><a name="[50]"></a>inv_start_eMPL_outputs</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, empl_outputs.o(i.inv_start_eMPL_outputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = inv_start_eMPL_outputs &rArr; inv_register_data_cb &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_register_data_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> empl_outputs.o(i.inv_enable_eMPL_outputs)
</UL>
<P><STRONG><a name="[53]"></a>inv_db_load_func</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, data_builder.o(i.inv_db_load_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_db_load_func &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_compass_bias_found
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_builder.o(i.inv_init_data_builder)
</UL>
<P><STRONG><a name="[52]"></a>inv_db_save_func</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_builder.o(i.inv_db_save_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_db_save_func &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_builder.o(i.inv_init_data_builder)
</UL>
<P><STRONG><a name="[1ee]"></a>inv_set_contiguous</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, data_builder.o(i.inv_set_contiguous))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_on_data
</UL>

<P><STRONG><a name="[1ea]"></a>inv_q30_to_float</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q30_to_float))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_angle
</UL>

<P><STRONG><a name="[205]"></a>inv_row_2_scale</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_row_2_scale))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>

<P><STRONG><a name="[18e]"></a>__print_result_location</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, mpl.o(i.__print_result_location))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = __print_result_location &rArr; _MLPrintLog &rArr; fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MLPrintLog
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_start_mpl
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_mpl
</UL>

<P><STRONG><a name="[126]"></a>I2C_ConvertOtherXferOptions</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_ConvertOtherXferOptions))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>I2C_DMAAbort</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_DMAAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_DMAAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_i2c.o(i.I2C_ITError)
<LI> stm32f4xx_hal_i2c.o(i.I2C_Slave_STOPF)
</UL>
<P><STRONG><a name="[158]"></a>I2C_ITError</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_ITError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_ITError
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
</UL>

<P><STRONG><a name="[12d]"></a>I2C_MasterReceive_BTF</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterReceive_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_MasterReceive_BTF
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>I2C_MasterReceive_RXNE</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterReceive_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_MasterReceive_RXNE
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>I2C_MasterTransmit_BTF</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterTransmit_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_MasterTransmit_BTF
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>I2C_MasterTransmit_TXE</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterTransmit_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_MasterTransmit_TXE
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>I2C_Master_ADD10</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_Master_ADD10))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>I2C_Master_ADDR</STRONG> (Thumb, 616 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_Master_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Master_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>I2C_Master_SB</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_Master_SB))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>I2C_SlaveReceive_BTF</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_SlaveReceive_BTF))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>I2C_SlaveReceive_RXNE</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_SlaveReceive_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SlaveReceive_RXNE
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>I2C_SlaveTransmit_BTF</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_SlaveTransmit_BTF))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>I2C_SlaveTransmit_TXE</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_SlaveTransmit_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SlaveTransmit_TXE
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[12e]"></a>I2C_Slave_ADDR</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_Slave_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Slave_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>I2C_Slave_STOPF</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_Slave_STOPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Slave_STOPF &rArr; I2C_ITError
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetState
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[4a]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[14a]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>UART_Receive_IT</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>UART_SetConfig</STRONG> (Thumb, 864 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[14d]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[141]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[142]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[58]"></a>inv_check_peaks</STRONG> (Thumb, 486 bytes, Stack size 72 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_check_peaks &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[73]"></a>inv_ignore_compass_data</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_ignore_compass_data &rArr; inv_add_compass_block_data &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_large_mag_field
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_compass_state
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_sum_of_sqr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_sample_balance
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_add_compass_block_data
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[78]"></a>inv_bias_stability</STRONG> (Thumb, 368 bytes, Stack size 120 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = inv_bias_stability &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[81]"></a>inv_set_peaks</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_set_peaks
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_compass_only_cal
</UL>

<P><STRONG><a name="[89]"></a>inv_init_sensitivity_const</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, compass_vec_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_init_sensitivity_const &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_vector_compass_cal
</UL>

<P><STRONG><a name="[a2]"></a>inv_reset_packet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fast_no_motion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_reset_packet &rArr; inv_init_maxmin
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_maxmin
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_fast_nomot
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_detect_motion_by_gyro_accel
</UL>

<P><STRONG><a name="[b6]"></a>inv_find_synchronized_compass_angle</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, fusion_9axis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = inv_find_synchronized_compass_angle &rArr; inv_compass_angle &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_angle
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_perform_9x_fusion
</UL>

<P><STRONG><a name="[48]"></a>inv_gtc_load</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_gtc_load &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro_tc.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>inv_gtc_store</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_gtc_store &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro_tc.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>inv_gtc_compute_slope</STRONG> (Thumb, 478 bytes, Stack size 104 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_gtc_compute_slope &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_data_cb
</UL>

<P><STRONG><a name="[ca]"></a>inv_gtc_add_data</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_gtc_add_data &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_data_cb
</UL>

<P><STRONG><a name="[46]"></a>inv_gtc_data_cb</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gyro_tc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inv_gtc_data_cb &rArr; inv_gtc_compute_slope &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_bias
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_motion_state
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_bias_tc_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_bias
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_add_data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_gtc_compute_slope
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro_tc.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>accel_fusion</STRONG> (Thumb, 458 bytes, Stack size 128 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = accel_fusion &rArr; inv_q_norm4 &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_norm4
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_multf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invertf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_addf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>

<P><STRONG><a name="[ec]"></a>inv_compute_quat_from_accel</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_compute_quat_from_accel &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>

<P><STRONG><a name="[ed]"></a>inv_normalize_quat</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inv_normalize_quat &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_gyro_quaternion
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_process_dmp_quaternion
</UL>

<P><STRONG><a name="[f0]"></a>inv_process_dmp_quaternion</STRONG> (Thumb, 438 bytes, Stack size 88 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_process_dmp_quaternion &rArr; inv_q_mult &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_to_body_with_scale
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_bias
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_normalize_quat
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>

<P><STRONG><a name="[49]"></a>inv_generate_quaternion</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, quaternion_supervisor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = inv_generate_quaternion &rArr; inv_generate_accel_gyro_quaternion &rArr; accel_fusion &rArr; inv_q_norm4 &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_store_gaming_quaternion
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_generate_accel_gyro_quaternion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternion_supervisor.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>inv_check_push</STRONG> (Thumb, 352 bytes, Stack size 72 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_check_push &rArr; inv_set_accel_bias_mask &rArr; inv_apply_calibration &rArr; inv_convert_to_body_with_scale &rArr; inv_q30_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_bias_found
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_linear_accel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gravity
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_bias_mask
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_accuracy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_current_calibrated_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[100]"></a>inv_check_coverage_set_bias</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_check_coverage_set_bias &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[102]"></a>inv_combine_data_calculate_bias</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = inv_combine_data_calculate_bias &rArr; inv_compute_bias &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_bias
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_combine_compass_data
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[108]"></a>set_sample_rate</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, accel_auto_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = set_sample_rate &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_auto_calibrate
</UL>

<P><STRONG><a name="[18f]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[179]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[191]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[190]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
